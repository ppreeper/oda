#!/bin/bash
[ -z $ODOODB ] && export ODOODB=${PWD##*/}
POD=${PWD##*/}
IPV4=$(ip -4 -br a show eth0 | awk '{print $3}' | awk -F'/' '{print $1}')
BASE=`dirname "${0}"`

function envrc(){
[ -z ${2} ] && export PORT=8069 || export PORT=${2}
cat << EOF | tee .envrc > /dev/null
layout python3
export ODOO_IMAGE=odoobase
export ODOO_V=${1}.0
export ODOO_PORT=${PORT}
export ODOO_C=${HOME}/workspace/repos/${1}.0/odoo
export ODOO_E=${HOME}/workspace/repos/${1}.0/enterprise
EOF
}

function configfile(){
cat << EOF | tee conf/odoo.conf > /dev/null
[options]
addons_path = ./odoo/addons,./enterprise,./addons
admin_passwd = adminadmin
without_demo = all
csv_internal_sep = ;
data_dir = ./data
db_host = ${IPV4}
db_port = 5432
db_maxconn = 24
db_user = odoo${1}
db_password = odooodoo
db_name = ${ODOODB}
db_template = template0
db_sslmode = disable
http_enable = True
http_interface =
http_port = 8069
reportgz = False
server_wide_modules = base,web
EOF
}

function pipfile(){
cat << EOF | tee Pipfile > /dev/null
[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[dev-packages]
yapf="*"
pylint="*"
pylint-odoo="*"

[requires]
python_version = "3"
EOF
}

function initproject(){
    shift
    case ${1} in
      "15"|"16")
        envrc ${1} ${2}
        direnv allow >/dev/null
        source .envrc 2>/dev/null
        mkdir -p addons conf data backups
        chmod 777 data backups
        ln -s ${ODOO_C} odoo
        ln -s ${ODOO_E} enterprise
        configfile ${1}
        pipfile
        ;;
    *) echo "invalid odoo version";;
  esac
}

function odoo_init(){
    podman run --rm -it --name ${1} -p $ODOO_PORT:8069 \
	    -v ${PWD}/conf/odoo.conf:/opt/odoo/conf/odoo.conf \
	    -v ${PWD}/data:/opt/odoo/data \
	    -v ${ODOO_C}:/opt/odoo/odoo \
	    -v ${ODOO_E}:/opt/odoo/enterprise \
	    -v ${PWD}/addons:/opt/odoo/addons \
	    $ODOO_IMAGE \
	    odoo/odoo-bin -c conf/odoo.conf --no-http --stop-after-init -d $2 -i $3
}

function odoo_install(){
    podman exec --user odoo -it $1 odoo/odoo-bin -c conf/odoo.conf --no-http --stop-after-init -d $2 -i $3
}

function odoo_upgrade(){
    podman exec --user odoo -it $1 odoo/odoo-bin -c conf/odoo.conf --no-http --stop-after-init -d $2 -u $3
}

function odoo_start(){
    podman run -d --name ${1} -p $ODOO_PORT:8069 \
	    -v ${PWD}/conf/odoo.conf:/opt/odoo/conf/odoo.conf \
	    -v ${PWD}/data:/opt/odoo/data \
	    -v ${PWD}/backups:/opt/odoo/backups \
	    -v ${ODOO_C}:/opt/odoo/odoo \
	    -v ${ODOO_E}:/opt/odoo/enterprise \
	    -v ${PWD}/addons:/opt/odoo/addons \
	    $ODOO_IMAGE
}

function odoo_stop(){
    podman rm -f ${1} 2>/dev/null
}

function cli_help(){
  printf "odo - Odoo Container Tool\n"
  printf "\nProject Admin Commands\n"
  printf "   initproject          Create a new project\n"
  printf "   destroy              Fully Destroy the project and its files [CAUTION]\n"
  printf "   reset                Drop database and filestore [CAUTION]\n"
  printf "\nDatabase Application Commands\n"
  printf "   init               Initialize the database\n"
  printf "   install <modules>  Install module(s) (comma seperated list)\n"
  printf "   upgrade <modules>  Upgrade module(s) (comma seperated list)\n"
  printf "\nDatabase Admin\n"
  printf "   start          Start the instance\n"
  printf "   stop           Stop the instance\n"
  printf "   restart        Restart the instance\n"
  printf "   logs           Follow the logs\n"
  printf "   stats          Get POD stats\n"
  printf "   top            POD top command\n"
  printf "   bin <command>  Run an odoo-bin command\n"
  printf "   exec           Open shell in container\n"
  printf "   execroot       Open shell in container as root\n"
  printf "   psql           Access the raw database\n"
}

case ${1} in
  "init") odoo_init $POD $ODOODB base,l10n_ca && podman restart $POD ;;
  "install") odoo_install $POD $ODOODB ${2} && podman restart $POD ;;
  "upgrade") odoo_upgrade $POD $ODOODB ${2} && podman restart $POD ;;
  "start") odoo_start $POD ;;
  "stop") odoo_stop $POD ;;
  "restart") podman restart $POD ;;
  "logs") podman logs -f $POD ;;
  "stats") podman stats $POD ;;
  "top") podman top $POD ;;
  "bin") shift && podman exec --user odoo -it $POD odoo/odoo-bin $@ ;;
  "exec") shift && podman exec --user odoo -it $POD /bin/bash ;;
  "execroot") shift && podman exec --user root -it $POD /bin/bash ;;
  "psql")
    podman exec -it --user postgres db15 psql $ODOODB
    if [[ $(echo $?) != 0 ]]; then
      podman exec -it --user postgres db15 psql
    fi
    ;;
  "reset")
    read -r -p "Are you sure? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      odoo_stop $POD
      sudo rm -rf data/* > /dev/null
      podman exec -it --user postgres db15 dropdb -f $ODOODB
    fi
    ;;
  "destroy")
    read -r -p "Are you sure you want to destroy everything? [YES/N] " response
    if [[ "$response" =~ ^(YES)$ ]]; then
      read -r -p "Are you **really** sure you want to destroy everything? [YES/N] " response
      if [[ "$response" =~ ^(YES)$ ]]; then
        echo "Destroying project"
        odoo_stop $POD
        sudo rm -rf .direnv/ addons/ backups/ conf/ data/ .envrc Pipfile enterprise odoo
        podman exec -it --user postgres db15 dropdb -f $ODOODB >/dev/null
        echo "Project has been destroyed"
      fi
    fi
    ;;
  "initproject") initproject $@ ;;
  *) cli_help ;;
esac
