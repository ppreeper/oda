#!/usr/bin/env python3
"""Odoo Administration Tool
This tool uses a local kubernetes cluster to spin up develompent environments
It manages the Odoo source repositories in the workspace/repo/odoo directory
"""
from shutil import copytree, rmtree
import json
import subprocess
import argparse
import os
import sys
import time
from git import Repo
from passlib.context import CryptContext

SEMVER = "0.2.0"
# setup user homepath
username = os.getenv("USER")
sudouser = os.getenv("SUDO_USER")
homepath = (
    os.path.expanduser("~" + sudouser)
    if username == "root"
    else os.path.expanduser("~" + username)
)

# paths
config_dir = os.path.join(homepath, ".config")
local_dir = os.path.join(homepath, ".local")
repo_dir = os.path.join(homepath, "workspace/repos/odoo")
project_dir = os.path.join(homepath, "workspace/odoo")
CWD = os.getcwd()

BR_ADDR = "10.250.250.10"
DB_HOST = "db.local"
DB_PORT = "5432"
DB_PASS = "postgres"
DB_USERNAME = "odoodev"
DB_USERPASS = "odooodoo"

# images
container_image = {"name": "odoobase", "image": "ghcr.io/ppreeper/odoobase"}


def check_project(func, *args, **kwargs):
    """Check if it is a project directory decorator"""

    def wrapper(*args, **kwargs):
        if not os.path.exists(os.path.join(CWD, "conf", "odoo.conf")):
            print("not in a project directory")
            return
        func(*args, **kwargs)

    return wrapper


def are_you_sure(action):
    """Double Prompt"""
    text = input(f"Are you sure you want to {action} [YES/N] ")
    if text != "YES":
        return False
    text = input(f"Are you really sure you want to {action} [YES/N] ")
    if text != "YES":
        return False
    return True


def change_password(new_password):
    """Generate Password Hash"""
    new_password = new_password.strip()
    if new_password == "":
        return
    ctx = CryptContext(schemes=["pbkdf2_sha512"])
    pw_hash = ctx.hash(new_password)
    return pw_hash


def get_odoo_conf(key, conf_file=os.path.join(CWD, "conf", "odoo.conf")):
    """get key value from odoo.conf"""
    with open(conf_file, "r", encoding="UTF-8") as f:
        lines = f.readlines()
        for line in lines:
            if line.startswith(key):
                return line.split("=")[1].strip()
    return


def get_env(key):
    """get key value from env"""
    with open(
        os.path.join(CWD, ".env"),
        "r",
        encoding="UTF-8",
    ) as f:
        lines = f.readlines()
        for line in lines:
            if line.startswith(key):
                return line.split("=")[1].strip()
    return


def parse_multi(multi):
    """parse multiples list"""
    multi_list = []
    for m in multi:
        multi_list.extend(m.split(","))
    return multi_list


def parse_modules(modules):
    """parse modules list"""
    return ",".join(parse_multi(modules))


def get_current_odoo_repos():
    """Get Currently Copied Odoo Repos"""
    dirnames = os.listdir(repo_dir)
    dirnames = [dir for dir in dirnames if dir != "odoo"]
    dirnames = [dir for dir in dirnames if dir != "enterprise"]
    dirnames.sort()
    return dirnames


def get_current_odoo_projects():
    """Get Current Odoo Projects"""
    dirnames = os.listdir(project_dir)
    dirnames = [dir for dir in dirnames if dir != "backups"]
    dirnames.sort()
    return dirnames


def rmrf(data_dir):
    """Remove Directory Contents"""
    for filename in os.listdir(data_dir):
        file_path = os.path.join(data_dir, filename)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
            elif os.path.isdir(file_path):
                rmtree(file_path)
        except Exception as e:
            raise OSError(f"Error deleting {file_path}") from e


# ===================
# config
# config vscode
@check_project
def config_vscode():
    """Write the VSCode config"""
    host_paths = [
        os.path.join(repo_dir, get_env("ODOO_V"), "odoo"),
        os.path.join(repo_dir, get_env("ODOO_V"), "enterprise"),
    ]
    if not os.path.exists(os.path.join(CWD, ".vscode")):
        os.makedirs(os.path.join(CWD, ".vscode"))
    with open(
        os.path.join(CWD, ".vscode", "launch.json"),
        "w",
        encoding="UTF-8",
    ) as launch:
        launch.write(
            json.dumps(
                {
                    "version": "0.2.0",
                    "configurations": [
                        {
                            "name": "Launch",
                            "type": "python",
                            "request": "launch",
                            "stopOnEntry": False,
                            "python": "${command:python.interpreterPath}",
                            "program": "${workspaceRoot}/odoo/odoo-bin",
                            "args": [
                                "-c",
                                "${workspaceRoot}/conf/odoo.conf",
                                "-p",
                                "$ODOO_PORT",
                            ],
                            "cwd": "${workspaceRoot}",
                            "env": {},
                            "envFile": "${workspaceFolder}/.env",
                            "console": "integratedTerminal",
                        }
                    ],
                },
                indent=4,
            )
        )
    with open(
        os.path.join(CWD, ".vscode", "settings.json"),
        "w",
        encoding="UTF-8",
    ) as settings:
        settings.write(
            json.dumps(
                {
                    "python.analysis.extraPaths": host_paths,
                    "python.linting.pylintEnabled": True,
                    "python.linting.enabled": True,
                    "python.terminal.executeInFileDir": True,
                    "python.formatting.provider": "black",
                },
                indent=2,
            )
        )
    return


# config pyright
@check_project
def config_pyright():
    """Write pyrightconfig.json"""
    host_paths = [
        os.path.join(repo_dir, get_env("ODOO_V"), "odoo"),
        os.path.join(repo_dir, get_env("ODOO_V"), "enterprise"),
    ]
    host_paths.append("addons")

    with open(
        os.path.join(CWD, "pyrightconfig.json"),
        "w",
        encoding="UTF-8",
    ) as settings:
        settings.write(
            json.dumps(
                {
                    "venvPath": ".",
                    "venv": ".direnv",
                    "executionEnvironments": [{"root": ".", "extraPaths": host_paths}],
                },
                indent=2,
            )
        )
    return


# ===================
# start
@check_project
def start():
    """Start the instance"""
    project = os.path.basename(CWD)
    odoo_v = get_env("ODOO_V")
    subprocess.run(
        [
            "podman",
            "run",
            "--rm",
            "-d",
            "--publish-all",
            "--userns",
            "keep-id",
            "--name",
            f"{project}.local",
            "-v",
            f"{CWD}/conf:/opt/odoo/conf:ro",
            "-v",
            f"{CWD}/data:/opt/odoo/data",
            "-v",
            f"{CWD}/addons:/opt/odoo/addons",
            "-v",
            f"{repo_dir}/{odoo_v}/odoo:/opt/odoo/odoo:ro",
            "-v",
            f"{repo_dir}/{odoo_v}/enterprise:/opt/odoo/enterprise:ro",
            "-v",
            f"{project_dir}/backups:/opt/odoo/backups",
            f"ghcr.io/ppreeper/odoobase:{odoo_v}",
        ],
        check=False,
    )
    gen_caddy()
    caddy_stop()
    caddy_start()
    return


# ===================
# stop
@check_project
def stop():
    """Stop the instance"""
    project = os.path.basename(CWD)
    subprocess.run(["podman", "stop", f"{project}.local"], check=False)
    return


# ===================
# restart
@check_project
def restart():
    """Restart the instance"""
    project = os.path.basename(CWD)
    subprocess.run(["podman", "restart", f"{project}.local"], check=False)
    gen_caddy()
    caddy_stop()
    caddy_start()
    return


# ===================
# proxy
# proxy start
def caddy_start():
    """Proxy Start"""
    subprocess.run(
        ["caddy", "start", "--config", os.path.join(project_dir, "Caddyfile")],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=False,
    )
    return


# proxy stop
def caddy_stop():
    """Proxy Stop"""
    subprocess.run(
        ["caddy", "stop", "--config", os.path.join(project_dir, "Caddyfile")],
        check=False,
    )
    return


# proxy restart
def caddy_restart():
    """Proxy Restart"""
    subprocess.run(
        ["caddy", "reload", "--config", os.path.join(project_dir, "Caddyfile")],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=False,
    )
    return


def get_odoo_pods():
    """Get Odoo Pods"""
    output = subprocess.run(
        ["podman", "ps", "--format", "'{{.Image}} {{.Names}} {{.Ports}}'"],
        capture_output=True,
        text=True,
        check=False,
    )

    pod_configs = []

    for row in output.stdout.splitlines():
        pod = row.strip("'").split(" ")
        pod_record = {}
        if container_image["image"] in pod[0]:
            ports = pod[2:]
            pod_record["name"] = pod[1]
            odoo_ports = {}
            for port in ports:
                p = port.split("->")
                odoo_n = p[0].split(":")[1]
                odoo_p = p[1].split("/")[0]
                odoo_ports[odoo_p] = odoo_n
            pod_record["odoo_ports"] = odoo_ports
            pod_configs.append(pod_record)
    return pod_configs


def gen_caddy():
    """Generate Caddyfile"""
    pod_configs = get_odoo_pods()
    with open(
        os.path.join(project_dir, "Caddyfile"), "w", encoding="UTF-8"
    ) as caddyfile:
        for pod in pod_configs:
            caddyfile.write(pod["name"] + ":80 {" + "\n")
            caddyfile.write(
                "reverse_proxy http://127.0.1.1:" + pod["odoo_ports"]["8069"] + "\n"
            )
            caddyfile.write(
                "reverse_proxy /websocket http://127.0.1.1:"
                + pod["odoo_ports"]["8072"]
                + "\n"
            )
            caddyfile.write(
                "reverse_proxy /longpolling/* http://127.0.1.1:"
                + pod["odoo_ports"]["8072"]
                + "\n"
            )
            caddyfile.write("}" + "\n")

    subprocess.run(
        ["caddy", "fmt", "-w", os.path.join(project_dir, "Caddyfile")],
        check=False,
    )
    return


# ===================
# app
# app install
# app upgrade
@check_project
def app_install_upgrade(modules, install=True):
    """Install Upgrade modules"""
    iu = "-i" if install else "-u"
    project = os.path.basename(CWD)
    mod_list = parse_modules(modules)
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            f"{project}.local",
            "odoo/odoo-bin",
            "--no-http",
            "--stop-after-init",
            f"{iu}",
            f"{mod_list}",
        ],
        check=False,
    )
    return


# ===================
# logs
@check_project
def logs():
    """Show logs"""
    project = os.path.basename(CWD)
    print(f"podman logs -f {project}.local")
    subprocess.run(["podman", "logs", "-f", f"{project}.local"], check=False)
    return


# ===================
# scaffold
@check_project
def scaffold(module):
    """Scaffold an App"""
    project = os.path.basename(CWD)
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            f"{project}.local",
            "odoo/odoo-bin",
            "scaffold",
            f"{module}",
            "/opt/odoo/addons/.",
        ],
        check=False,
    )
    return


# ===================
# ps
def podps():
    """List Odoo Instances"""
    pod_configs = get_odoo_pods()
    pods = []
    for pod in pod_configs:
        pods.append(pod["name"])
    pods.sort()
    for pod in pods:
        print(pod)
    return


# ===================
# exec
@check_project
def execshell():
    """Exec prompt"""
    project = os.path.basename(CWD)
    subprocess.run(
        ["podman", "exec", "-it", f"{project}.local", "/bin/bash"],
        check=True,
    )
    return


# ===================
# psql
@check_project
def psql():
    """Connect to Database"""
    project = os.path.basename(CWD)
    db_host = get_odoo_conf("db_host")
    db_user = get_odoo_conf("db_user")
    db_password = get_odoo_conf("db_password")
    db_name = get_odoo_conf("db_name")
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            "-e",
            f"PGPASSWORD={db_password}",
            f"{project}.local",
            "psql",
            "-h",
            f"{db_host}",
            "-U",
            f"{db_user}",
            f"{db_name}",
        ],
        check=False,
    )
    return


# ===================
# pgdb
def pgdb():
    """Connect to PostgreSQL Database"""
    subprocess.run(
        ["podman", "exec", "-it", DB_HOST, "psql", "-U", "postgres"], check=False
    )
    return


def pgdb_start():
    """PosgreSQL start"""
    subprocess.run(
        [
            "podman",
            "run",
            "--name",
            DB_HOST,
            "-p",
            f"{DB_PORT}:5432",
            "-e",
            f"POSTGRES_PASSWORD={DB_PASS}",
            "-v",
            f"{DB_HOST}:/var/lib/postgresql/data",
            "-d",
            "--restart",
            "always",
            "docker.io/postgres:15-alpine",
        ],
        check=False,
    )
    return


def pgdb_stop():
    """PosgreSQL stop"""
    subprocess.run(["podman", "stop", DB_HOST], check=False)
    return


def pgdb_restart():
    """PosgreSQL restart"""
    subprocess.run(["podman", "restart", DB_HOST], check=False)
    return


def pgdb_fullreset():
    """PostgreSQL Full Reset"""
    pgdb_stop()
    subprocess.run(["podman", "volume", "rm", DB_HOST], check=False)
    pgdb_start()
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            "--user",
            "postgres",
            DB_HOST,
            "psql",
            "-c",
            f"\"create role {DB_USERNAME} with createdb login password '{DB_USERPASS}';\"",
        ],
        check=False,
    )

    return


# ===================
# backup
@check_project
def backup():
    """Backup to file"""
    project = os.path.basename(CWD)
    subprocess.run(
        ["podman", "exec", "-it", f"{project}.local", "oda_db.py", "-b"],
        check=True,
    )
    return


# ===================
# restore
@check_project
def restore(backup_files):
    """Restore from backup file"""
    project = os.path.basename(CWD)
    if not are_you_sure("restore from backup"):
        return
    # stop
    subprocess.run(["podman", "stop", f"{project}.local"], check=False)
    files = parse_multi(backup_files)
    files.sort()
    project = os.path.basename(CWD)
    for dump_file in files:
        fname = os.path.splitext(os.path.basename(dump_file))[0].split(".")[0]
        bfile = os.path.splitext(fname)[0].split("__")

        if len(bfile) == 2:
            print(f"restore from dump file {dump_file}")
            _restore_db_tar(dump_file)
        elif len(bfile) == 3 and bfile[-1] == "addons":
            print(f"restore addons file {dump_file}")
            _restore_addons_tar(dump_file)
        else:
            print("invalid backup filename")
    return


@check_project
def _restore_db_tar(bkp_file, copy=True):
    print(bkp_file)
    db_host = get_odoo_conf("db_host")
    db_name = get_odoo_conf("db_name")
    db_user = get_odoo_conf("db_user")
    db_template = get_odoo_conf("db_template")
    # drop target database
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            db_host,
            "dropdb",
            "--if-exists",
            "-U",
            "postgres",
            "-f",
            db_name,
        ],
        check=False,
    )
    # create new postgresql database
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            db_host,
            "createdb",
            "-U",
            "postgres",
            "--encoding",
            "unicode",
            "--lc-collate",
            "C",
            "-T",
            db_template,
            "-O",
            db_user,
            db_name,
        ],
        check=False,
    )

    # restore postgresql database
    tarpg_cmd = ["tar", "Oaxf", bkp_file, "./dump.sql"]
    pg_cmd = ["psql", "-h", db_host, "-U", db_user, "--dbname", db_name, "-q"]
    tarpg = subprocess.Popen(
        tarpg_cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    )
    pg = subprocess.Popen(
        pg_cmd,
        stdin=tarpg.stdout,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    tarpg.stdout.close()
    pg.communicate()
    if pg.returncode != 0:
        raise OSError(
            f"could not backup postgresql database {db_name} pg.returncode {pg.returncode}"
        )

    #########
    # Filestore Restore
    data = os.path.join(CWD, "data")
    filestore = os.path.join(data, "filestore", db_name)
    rmrf(data)
    os.makedirs(filestore, exist_ok=True)
    tar_cmd = "tar"
    tar_args = ["axf", bkp_file, "-C", filestore, "--strip-components=2", "./filestore"]
    print(tar_cmd, *tar_args)
    tar = subprocess.run(
        [tar_cmd, *tar_args],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT,
        check=True,
    )
    if tar.returncode != 0:
        raise OSError(f"could not restore filestore for {db_name}")

    if copy:
        db_reset(db_host, db_name, db_user)
    return


def db_reset(db_host, db_name, db_user):
    """Database Reset DBUUID and remove MCode"""
    sqlq = ["delete from ir_config_parameter where key='database.enterprise_code'"]
    sqlq.append(
        "update ir_config_parameter set value=(select gen_random_uuid()) "
        + "where key = 'database.uuid'"
    )
    sqlq.append(
        """insert into ir_config_parameter
        (key,value,create_uid,create_date,write_uid,write_date)
        values
        ('database.expiration_date',(current_date+'3 months'::interval)::timestamp,1,
        current_timestamp,1,current_timestamp)
        on conflict (key)
        do update set value = (current_date+'3 months'::interval)::timestamp;"""
    )
    for q in sqlq:
        subprocess.run(
            ["podman", "exec", "-it", db_host, "psql", "-U", db_user, "-c", q, db_name],
            check=False,
        )
    return


@check_project
def _restore_addons_tar(bkp_file):
    """Restore Odoo DB addons folders"""
    addons = ""
    dest = addons if addons != "" else bkp_file.split("_")[-1:][0].split(".")[0]
    dest = os.path.join(CWD, dest)
    rmrf(dest)
    tar_cmd = "tar"
    tar_args = ["axf", bkp_file, "-C", dest, "."]
    try:
        subprocess.run(
            [tar_cmd, *tar_args],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT,
            check=True,
        )
    except Exception as e:
        raise OSError(f"could not restore addons {dest}") from e


# ===================
# admin
# admin user
@check_project
def admin_username():
    """Set Admin username"""
    user1 = input("Please enter  the new admin username: ").strip()
    user2 = input("Please verify the new admin username: ").strip()
    if user1 != user2:
        print("usernames entered do not match")
        return
    project = os.path.basename(CWD)
    db_host = get_odoo_conf("db_host")
    db_user = get_odoo_conf("db_user")
    db_password = get_odoo_conf("db_password")
    db_name = get_odoo_conf("db_name")
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            "-e",
            f"PGPASSWORD={db_password}",
            f"{project}.local",
            "psql",
            "-h",
            f"{db_host}",
            "-U",
            f"{db_user}",
            f"{db_name}",
            "-c",
            f"""update res_users set login='{user1}' where id=2;""",
        ],
        check=False,
    )
    return


# admin password
@check_project
def admin_password():
    """Set Admin password"""
    if not are_you_sure("change the admin password"):
        return
    pass1 = input("Please enter  the admin password: ").strip()
    pass2 = input("Please verify the admin password: ").strip()
    if pass1 != pass2:
        print("passwords entered do not match")
        return
    password = change_password(pass1).strip()
    project = os.path.basename(CWD)
    db_host = get_odoo_conf("db_host")
    db_user = get_odoo_conf("db_user")
    db_password = get_odoo_conf("db_password")
    db_name = get_odoo_conf("db_name")
    subprocess.run(
        [
            "podman",
            "exec",
            "-it",
            "-e",
            f"PGPASSWORD={db_password}",
            f"{project}.local",
            "psql",
            "-h",
            f"{db_host}",
            "-U",
            f"{db_user}",
            f"{db_name}",
            "-c",
            f"""update res_users set password='{password}' where id=2;""",
        ],
        check=False,
    )
    return


# ===================
# project
def gen_odoo_conf(dbname, epoch, enterprise=True):
    """Generate and write the project odoo.conf file"""
    dbname = dbname.replace("-", "_")
    enterprise_dir = ""
    if enterprise:
        enterprise_dir = "/opt/odoo/enterprise,"
    return {
        "addons_path": f"/opt/odoo/odoo/addons,{enterprise_dir}/opt/odoo/addons",
        "data_dir": "/opt/odoo/data",
        "admin_passwd": "adminadmin",
        "without_demo": "all",
        "csv_internal_sep": ";",
        "reportgz": False,
        "server_wide_modules": "base,web",
        "db_host": "db.local",
        "db_port": 5432,
        "db_maxconn": 8,
        "db_user": "odoodev",
        "db_password": "odooodoo",
        "db_name": f"{dbname}_{epoch}",
        "db_template": "template0",
        "db_sslmode": "disable",
        "list_db": False,
        "proxy": True,
        "proxy_mode": True,
        "logfile": "/dev/stderr",
        "log_level": "debug",
        "log_handler": "odoo.tools.convert:DEBUG",
        "workers": 0,
    }


def write_odoo_conf(file, project_name, edition):
    """Write Odoo Configfile"""
    t = time.strftime("%Y%m%d%H%M%S", time.localtime(time.time()))
    with open(file, "w", encoding="UTF-8") as odoo_conf:
        if edition == "community":
            oconf = gen_odoo_conf(project_name, epoch=t, enterprise=False)
        else:
            oconf = gen_odoo_conf(project_name, epoch=t, enterprise=True)
        odoo_conf.write("[options]" + "\n")
        for k, v in oconf.items():
            odoo_conf.write(f"{k} = {v}" + "\n")
    return


def project_setup(edition, version, project_name):
    """Project Config Setup"""
    if os.path.exists(os.path.join(project_dir, project_name)):
        print(f"project {project_name} already exists")
        return
    os.makedirs(os.path.join(project_dir, project_name))
    for pdir in ["addons", "conf", "data"]:
        os.makedirs(os.path.join(project_dir, project_name, pdir))
    # odoo.conf
    write_odoo_conf(
        os.path.join(project_dir, project_name, "conf", "odoo.conf"),
        project_name,
        edition,
    )
    # envrc
    with open(
        os.path.join(project_dir, project_name, ".env"), "w", encoding="UTF-8"
    ) as envrc:
        envrc.writelines(f"ODOO_V={version}")
    return


# project init
def project_init(edition, version, projectname):
    """Project Init"""
    project_name = projectname
    project_setup(edition, version, project_name)
    return


# project branch
def project_branch(edition, version, projectname, branch, url):
    """Project Branch Init"""
    project_name = f"{projectname}" if branch == "" else f"{projectname}-{branch}"
    project_setup(edition, version, project_name)
    Repo.clone_from(
        url,
        os.path.join(project_dir, project_name, "addons"),
        branch=branch,
    )
    return


# project reset
@check_project
def project_reset():
    """Project Reset: clear the data directory and drop database"""
    project = os.path.basename(CWD)
    db_host = get_odoo_conf("db_host")
    db_name = get_odoo_conf("db_name")
    if not are_you_sure("reset the project"):
        return
    # stop
    subprocess.run(["podman", "stop", f"{project}.local"], check=False)
    # rm -rf data/*
    rmrf(os.path.join(CWD, "data"))
    os.makedirs(os.path.join(CWD, "data"), exist_ok=True)
    # drop db
    subprocess.run(
        ["podman", "exec", "-it", db_host, "dropdb", "-U", "postgres", db_name],
        check=False,
    )
    return


# project hostsfile
def get_idx(lines, search_term):
    """Get line number"""
    for idx, line in enumerate(lines):
        if line.strip() == search_term:
            return idx
    return 0


# @check_project
def project_hostsfile(new_host=""):
    """Update /etc/hosts file with projectname"""
    readhostlines = []
    with open("/etc/hosts", "r", encoding="UTF-8") as hosts:
        readhostlines = hosts.readlines()

    hostlines = []
    for line in readhostlines:
        hostlines.append(line.strip())

    begin = get_idx(hostlines, "#ODABEGIN")
    end = get_idx(hostlines, "#ODAEND")

    if begin > end:
        print("host file out of order, edit /etc/hosts manually")
        return

    if begin == 0 and end == 0:
        hostlines.append("")
        hostlines.append("#ODABEGIN")
        hostlines.append("#ODAEND")
    begin = get_idx(hostlines, "#ODABEGIN")
    end = get_idx(hostlines, "#ODAEND")
    entries = hostlines[begin + 1 : end]
    new_entries = []
    for ent in entries:
        ehost = ent.split(" ")[1]
        new_entries.append(f"{BR_ADDR} {ehost}")
    new_entries.append(f"{BR_ADDR} {new_host}.local")
    new_entries = list(dict.fromkeys(new_entries))
    new_entries.sort()
    pre = hostlines[: begin + 1]
    post = hostlines[end:]
    new_hostlines = pre + new_entries + post

    with open("/etc/hosts", "w", encoding="UTF-8") as hosts:
        for line in new_hostlines:
            hosts.write(line.strip() + "\n")
    return


# project rebuild
@check_project
def project_rebuild(oproject):
    """Rebuild project with db and filestore of another project but with current addons"""
    print(f"project_rebuild from {oproject}")
    project = os.path.basename(CWD)
    db_host = get_odoo_conf("db_host")
    db_name = get_odoo_conf("db_name")
    db_user = get_odoo_conf("db_user")
    odb_name = get_odoo_conf(
        "db_name", os.path.join(project_dir, oproject, "conf", "odoo.conf")
    )
    if not are_you_sure("reset the project"):
        return
    # stop target
    subprocess.run(["podman", "stop", f"{project}.local"], check=False)

    # remove targets files, copy from source to target
    rmrf(os.path.join(CWD, "data"))
    oproject_filestore = os.path.join(
        project_dir, oproject, "data", "filestore", odb_name
    )
    project_filestore = os.path.join(CWD, "data", "filestore", db_name)
    os.makedirs(project_filestore, exist_ok=True)
    copytree(oproject_filestore, project_filestore, dirs_exist_ok=True)

    # drop target database
    subprocess.run(
        ["podman", "exec", "-it", db_host, "dropdb", "-U", "postgres", db_name],
        check=False,
    )
    # clone source db to target db
    sqlq = f"SELECT pg_terminate_backend (pid) FROM pg_stat_activity WHERE datname = '{odb_name}'"
    subprocess.run(
        ["podman", "exec", "-it", db_host, "psql", "-U", "postgres", "-c", sqlq],
        stdout=subprocess.DEVNULL,
        check=False,
    )
    sqlq = f"CREATE DATABASE {db_name} WITH TEMPLATE {odb_name} OWNER {db_user}"
    subprocess.run(
        ["podman", "exec", "-it", db_host, "psql", "-U", "postgres", "-c", sqlq],
        stdout=subprocess.DEVNULL,
        check=False,
    )
    db_reset(db_host, db_name, db_user)
    return


# ===================
# repo
# repo base
# repo base clone
def repo_base_clone():
    """repo base clone"""
    print("repo base clone")
    if not os.path.exists(repo_dir):
        os.makedirs(repo_dir)
    # community
    if os.path.exists(os.path.join(repo_dir, "odoo", ".git")):
        print("odoo community already exists")
    else:
        repo_url = "https://github.com/odoo/odoo"
        Repo.clone_from(repo_url, os.path.join(repo_dir, "odoo"))
    # enterprise
    if os.path.exists(os.path.join(repo_dir, "enterprise", ".git")):
        print("odoo enterprise already exists")
    else:
        repo_url = "https://github.com/odoo/enterprise"
        Repo.clone_from(repo_url, os.path.join(repo_dir, "odoo"))
    return


# repo base update
def repo_base_update():
    """repo base update"""
    # community
    repo = Repo(os.path.join(repo_dir, "odoo"))
    for remote in repo.remotes:
        remote.fetch()
    refs = [
        ref.reference.name
        for ref in repo.remotes.origin.refs
        if ref.name == "origin/HEAD"
    ]
    branch_ref = refs[0] if len(refs) > 0 else ""
    branch = branch_ref.split("/")[1] if len(branch_ref.split("/")) == 2 else ""
    repo.git.checkout(branch)
    repo.remotes.origin.pull()
    # enterprise
    repo = Repo(os.path.join(repo_dir, "enterprise"))
    for remote in repo.remotes:
        remote.fetch()
    refs = [
        ref.reference.name
        for ref in repo.remotes.origin.refs
        if ref.name == "origin/HEAD"
    ]
    branch_ref = refs[0] if len(refs) > 0 else ""
    branch = branch_ref.split("/")[1] if len(branch_ref.split("/")) == 2 else ""
    repo.git.checkout(branch)
    repo.remotes.origin.pull()

    return


# repo branch
# repo branch clone
def repo_branch_clone(version):
    """repo branch clone"""
    # branch
    if os.path.exists(os.path.join(repo_dir, version)):
        print(f"odoo {version} already exists")
    else:
        branch_dir = os.path.join(repo_dir, version)
        os.makedirs(branch_dir)
    # community
    if not os.path.exists(os.path.join(repo_dir, version, "odoo")):
        copytree(
            os.path.join(repo_dir, "odoo"),
            os.path.join(repo_dir, version, "odoo"),
        )
        repo = Repo(os.path.join(repo_dir, version, "odoo"))
        repo.git.checkout(version)
        repo.remotes.origin.pull()
    # enterprise
    if not os.path.exists(os.path.join(repo_dir, version, "enterprise")):
        copytree(
            os.path.join(repo_dir, "enterprise"),
            os.path.join(repo_dir, version, "enterprise"),
        )
        repo = Repo(os.path.join(repo_dir, version, "enterprise"))
        for remote in repo.remotes:
            remote.fetch()
        repo.git.checkout(version)
        repo.remotes.origin.pull()
    return


# repo branch update
def repo_branch_update(version):
    """repo branch update"""
    if not os.path.exists(os.path.join(repo_dir, version)):
        print(f"branch {version} does not exist, please clone the branch")
        return
    # community
    repo = Repo(os.path.join(repo_dir, "odoo"))
    for remote in repo.remotes:
        remote.fetch()
    repo.git.checkout(version)
    repo.remotes.origin.pull()
    # enterprise
    repo = Repo(os.path.join(repo_dir, "enterprise"))
    for remote in repo.remotes:
        remote.fetch()
    repo.git.checkout(version)
    repo.remotes.origin.pull()
    return


class ArgParser(argparse.ArgumentParser):
    """ArgParser modified to output help on error"""

    def error(self, message):
        print(f"error: {message}\n")
        self.print_help()


def main():
    """Odoo Administration Tool"""
    parser = ArgParser(
        prog="oda",
        description="Odoo Administration Tool",
        epilog="thanks for using %(prog)s!",
    )
    subparsers = parser.add_subparsers(
        dest="command", title="commands", help="commands"
    )

    # ===================
    # config        additional config options
    config_parser = subparsers.add_parser("config", help="additional config options")
    config_subparser = config_parser.add_subparsers(
        dest="config",
        title="config",
        help="additional config options",
        required=True,
    )

    # config vscode
    config_subparser.add_parser(
        "vscode", help="Setup vscode settings and launch json files"
    )

    # config pyright
    config_subparser.add_parser("pyright", help="Setup pyright settings")

    # ===================
    # completions   Generate bash completions

    # ===================
    # start         Start the instance
    subparsers.add_parser("start", help="Start the instance")

    # ===================
    # stop          Stop the instance
    subparsers.add_parser("stop", help="Stop the instance")

    # ===================
    # restart       Restart the instance
    subparsers.add_parser("restart", help="Restart the instance")

    # ===================
    # app management
    app_parser = subparsers.add_parser("app", help="app management")
    app_subparser = app_parser.add_subparsers(
        dest="app", title="app", help="app management", required=True
    )

    # app install
    install_parser = app_subparser.add_parser("install", help="Install module(s)")
    install_parser.add_argument("module", help="modules to install", nargs="+")

    # app upgrade
    upgrade_parser = app_subparser.add_parser("upgrade", help="Upgrade module(s)")
    upgrade_parser.add_argument(
        "module", help="modules to upgrade", default=["all"], nargs="*"
    )

    # ===================
    # logs          Follow the logs
    subparsers.add_parser("logs", help="Follow the logs")

    # ===================
    # scaffold      Generates an Odoo module skeleton in addons
    scaffold_parser = subparsers.add_parser(
        "scaffold", help="Generates an Odoo module skeleton in addons"
    )
    scaffold_parser.add_argument("module", help="%(prog)s module")

    # ===================
    # ps          List Odoo Instances
    subparsers.add_parser("ps", help="List Odoo Instances")

    # ===================
    # exec          Access the shell
    subparsers.add_parser("exec", help="Access the shell")

    # ===================
    # psql          Access the raw database
    subparsers.add_parser("psql", help="Access the raw database")

    # ===================
    # db         Access postgresql
    db_parser = subparsers.add_parser("db", help="Access postgresql")
    db_subparser = db_parser.add_subparsers(
        dest="db", title="db", help="Database", required=True
    )
    # admin user
    db_subparser.add_parser("psql", help="Database psql")
    db_subparser.add_parser("start", help="Database start")
    db_subparser.add_parser("stop", help="Database stop")
    db_subparser.add_parser("restart", help="Database restart")
    db_subparser.add_parser("fullreset", help="Database fullreset [CAUTION]")

    # ===================
    # Proxy
    proxy_parser = subparsers.add_parser("proxy", help="Caddy proxy")
    proxy_subparser = proxy_parser.add_subparsers(
        dest="proxy", title="proxy", help="Proxy", required=True
    )
    # admin user
    proxy_subparser.add_parser("start", help="Proxy start")
    proxy_subparser.add_parser("stop", help="Proxy stop")
    proxy_subparser.add_parser("restart", help="Proxy restart")
    proxy_subparser.add_parser("generate", help="Caddyfile generate")
    # ===================
    # backup        Backup database filestore and addons
    subparsers.add_parser("backup", help="Backup database filestore and addons")

    # ===================
    # restore       Restore database and filestore or addons
    restore_parser = subparsers.add_parser(
        "restore", help="Restore database and filestore or addons"
    )
    restore_parser.add_argument("file", help="Path to backup file", nargs="+")

    # ===================
    # admin         Admin user management
    admin_parser = subparsers.add_parser("admin", help="Admin user management")
    admin_subparser = admin_parser.add_subparsers(
        dest="admin", title="admin", help="Admin user management", required=True
    )

    # admin user
    admin_subparser.add_parser("username", help="Odoo Admin username")

    # admin password
    admin_subparser.add_parser("password", help="Odoo Admin password")

    # ===================
    # project       Project level commands [CAUTION]
    project_parser = subparsers.add_parser(
        "project", help="Project level commands [CAUTION]"
    )
    project_subparser = project_parser.add_subparsers(
        dest="project",
        title="project",
        help="Project level commands [CAUTION]",
        required=True,
    )

    # project init
    project_init_parser = project_subparser.add_parser(
        "init", help="initialize project directory"
    )
    project_init_parser.add_argument(
        "edition",
        choices=["community", "enterprise"],
        help="community or enterprise",
    )
    project_init_parser.add_argument(
        "version",
        help="Odoo Branch",
        choices=get_current_odoo_repos(),
    )
    project_init_parser.add_argument("projectname", help="Project Name")

    # project branch
    project_branch_parser = project_subparser.add_parser(
        "branch", help="initialize branch of project"
    )
    project_branch_parser.add_argument(
        "edition",
        help="community or enterprise",
        choices=["community", "enterprise"],
    )
    project_branch_parser.add_argument(
        "version",
        help="Odoo Branch",
        choices=get_current_odoo_repos(),
    )
    project_branch_parser.add_argument("projectname", help="Project Name")
    project_branch_parser.add_argument("branch", help="Project Branch")
    project_branch_parser.add_argument("url", help="Project URL")

    # project branch
    project_rebuild_parser = project_subparser.add_parser(
        "rebuild", help="rebuild from another project"
    )
    project_rebuild_parser.add_argument(
        "oproject", help="other project", choices=get_current_odoo_projects(), nargs=1
    )

    # project reset
    project_subparser.add_parser("reset", help="reset project dir and db")

    # project hostsfile
    project_subparser.add_parser(
        "hostsfile", help="Update /etc/hosts file (Requires root access)"
    )

    # ===================
    # repo          Odoo community and enterprise repository management
    repo_parser = subparsers.add_parser(
        "repo", help="Odoo community and enterprise repository management"
    )
    repo_subparser = repo_parser.add_subparsers(
        dest="repo",
        title="repo",
        help="Odoo community and enterprise repository management",
        required=True,
    )

    # repo base
    repo_base_parser = repo_subparser.add_parser("base", help="base")
    repo_base_subparser = repo_base_parser.add_subparsers(
        dest="base",
        title="base",
        help="Odoo community and enterprise repository management",
        required=True,
    )

    # repo base clone
    repo_base_subparser.add_parser("clone", help="clone the Odoo source repository")

    # repo base update
    repo_base_subparser.add_parser("update", help="update the Odoo source repository")

    # repo branch
    repo_branch_parser = repo_subparser.add_parser("branch", help="branch")
    repo_branch_subparser = repo_branch_parser.add_subparsers(
        dest="odoobranch",
        title="branch",
        help="Odoo community and enterprise branch management",
        required=True,
    )

    # repo branch clone
    repo_branch_clone_parser = repo_branch_subparser.add_parser(
        "clone", help="clone Odoo source repository"
    )
    repo_branch_clone_parser.add_argument("branch", help="branch name")

    # repo branch update
    repo_branch_update_parser = repo_branch_subparser.add_parser(
        "update", help="update Odoo version repository"
    )
    repo_branch_update_parser.add_argument(
        "branch", help="branch name", choices=get_current_odoo_repos()
    )

    parser.add_argument("--version", action="version", version=f"%(prog)s {SEMVER}")

    # ===================
    # process arguments
    args = parser.parse_args(args=None if sys.argv[1:] else ["--help"])

    if args.command == "config":
        if args.config == "vscode":
            config_vscode()
        elif args.config == "pyright":
            config_pyright()
    elif args.command == "start":
        start()
    elif args.command == "stop":
        stop()
    elif args.command == "restart":
        restart()
    elif args.command == "app":
        if args.app == "install" and args.module:
            app_install_upgrade(args.module, install=True)
        elif args.app == "upgrade" and args.module:
            app_install_upgrade(args.module, install=False)
    elif args.command == "logs":
        logs()
    elif args.command == "scaffold" and args.module:
        scaffold(args.module)
    elif args.command == "ps":
        podps()
    elif args.command == "exec":
        execshell()
    elif args.command == "psql":
        psql()
    elif args.command == "db":
        if args.db == "psql":
            pgdb()
        elif args.db == "start":
            pgdb_start()
        elif args.db == "stop":
            pgdb_stop()
        elif args.db == "restart":
            pgdb_restart()
    elif args.command == "backup":
        backup()
    elif args.command == "restore" and args.file:
        restore(args.file)
    elif args.command == "proxy":
        if args.proxy == "start":
            caddy_start()
        elif args.proxy == "stop":
            caddy_stop()
        elif args.proxy == "restart":
            caddy_restart()
        elif args.proxy == "generate":
            gen_caddy()
    elif args.command == "admin":
        if args.admin == "username":
            admin_username()
        elif args.admin == "password":
            admin_password()
    elif args.command == "project":
        if (
            args.project == "init"
            and args.edition
            and args.version
            and args.projectname
        ):
            project_init(args.edition, args.version, args.projectname)
        elif (
            args.project == "branch"
            and args.edition
            and args.version
            and args.projectname
            and args.branch
            and args.url
        ):
            project_branch(
                args.edition, args.version, args.projectname, args.branch, args.url
            )
        elif args.project == "rebuild" and args.oproject:
            project_rebuild(args.oproject[0])
        elif args.project == "reset":
            project_reset()
        elif args.project == "hostsfile":
            if username == "root":
                project_hostsfile(os.path.basename(CWD))
            else:
                print("not allowed: this requires root access")
    elif args.command == "repo":
        if args.repo == "base":
            if args.base == "clone":
                repo_base_clone()
            elif args.base == "update":
                repo_base_update()
        elif args.repo == "branch":
            if args.odoobranch == "clone" and args.branch:
                repo_branch_clone(args.branch)
            elif args.odoobranch == "update" and args.branch:
                repo_branch_update(args.branch)


if __name__ == "__main__":
    main()
